# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# Basic Airflow cluster configuration for CeleryExecutor with Redis and PostgreSQL.
#
# WARNING: This configuration is for local development. Do not use it in a production deployment.
#
# This configuration supports basic configuration using environment variables or an .env file
# The following variables are supported:
#
# AIRFLOW_IMAGE_NAME           - Docker image name used to run Airflow.
#                                Default: apache/airflow:2.9.0
# AIRFLOW_UID                  - User ID in Airflow containers
#                                Default: 50000
# AIRFLOW_PROJ_DIR             - Base path to which all the files will be volumed.
#                                Default: .
# Those configurations are useful mostly in case of standalone testing/running Airflow in test/try-out mode
#
# _AIRFLOW_WWW_USER_USERNAME   - Username for the administrator account (if requested).
#                                Default: airflow
# _AIRFLOW_WWW_USER_PASSWORD   - Password for the administrator account (if requested).
#                                Default: airflow
# _PIP_ADDITIONAL_REQUIREMENTS - Additional PIP requirements to add when starting all containers.
#                                Use this option ONLY for quick checks. Installing requirements at container
#                                startup is done EVERY TIME the service is started.
#                                A better way is to build a custom image or extend the official image
#                                as described in https://airflow.apache.org/docs/docker-stack/build.html.
#                                Default: ''
#
# Feel free to modify this file to suit your needs.
---
x-airflow-common:
  &airflow-common
  # In order to add custom dependencies or upgrade provider packages you can use your extended image.
  # Comment the image line, place your Dockerfile in the directory where you placed the docker-compose.yaml
  # and uncomment the "build" line below, Then run `docker-compose build` to build the images.
  image: ${AIRFLOW_IMAGE_NAME:-extended_airflow:latest}
  # build: .
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CELERY__WORKER_CONCURRENCY: 8
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: amqp://airflow:airflow@rabbitmq/ 
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__PARALLELISM: 64
    AIRFLOW__CORE__DAG_CONCURRENCY: 32
    AIRFLOW__SCHEDULER__PARSING_PROCESSES: 4
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    # yamllint disable rule:line-length
    # Use simple http server on scheduler for health checks
    # See https://airflow.apache.org/docs/apache-airflow/stable/administration-and-deployment/logging-monitoring/check-health.html#scheduler-health-check-server
    # yamllint enable rule:line-length
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    # WARNING: Use _PIP_ADDITIONAL_REQUIREMENTS option ONLY for a quick checks
    # for other purpose (development, test and especially production usage) build/extend Airflow image.
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:- apache-airflow[celery] pymongo apache-airflow holidays apache-airflow-providers-mongo==4.1.0 apache-airflow-providers-rabbitmq pika}  # Add RabbitMQ provider
    # The following line can be used to set a custom config file, stored in the local config folder
    # If you want to use it, outcomment it and replace airflow.cfg with the name of your config file
    # AIRFLOW_CONFIG: '/opt/airflow/config/airflow.cfg'
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config
    - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
    - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/jobs/common/spark_common
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    rabbitmq: 
        condition: service_healthy
    
    postgres:
      condition: service_healthy

services:
    # RabbitMQ, used by the flask app to queue up jobs whee
    rabbit:
        hostname: rabbit
        image: rabbitmq:latest
        environment:
            - RABBITMQ_DEFAULT_USER=admin
            - RABBITMQ_DEFAULT_PASS=mypass
            - SERVICE_PORTS=5672
            - TCP_PORTS=5672
#        ports:
#            - "5672:5672"
        networks:
          - app-tier
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock

    celery_results_postgres_db:
        hostname: celery_results_postgres_db
        image: postgres:11.1
        environment:   # Set up postgres database name and password
          POSTGRES_PASSWORD: password
          POSTGRES_DATABASE: celery
          POSTGRES_USER: celery
        ports:    # Set up ports exposed for other containers to connect to
          - 5433:5432
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        networks:
          - app-tier

    airflow_postgres_db:
        hostname: airflow_postgres_db
        image: postgres:11.1
        environment:   # Set up postgres database name and password
          POSTGRES_DATABASE: airflow
          POSTGRES_USER: airflow
          POSTGRES_PASSWORD: password
          POSTGRES_HOST: localhost
        ports:    # Set up ports exposed for other containers to connect to
          - 5434:5432
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        networks:
          - app-tier

    adminer:
        image: adminer
        restart: always
        ports:
            - 8088:8080
        networks:
            - app-tier

    # In order to build the image run
    # It needs to be retagged to upload to quay
    # docker-compose build --force-rm
    # docker tag sequence_automation_airflow quay.io/nyuad_cgsb/sequence_automation_airflow:latest
    airflow_init_db:
        build:
            context: .
            dockerfile: Dockerfile
        depends_on:
            - celery_results_postgres_db
            - airflow_postgres_db
            - rabbit
        links:
            - celery_results_postgres_db
            - airflow_postgres_db
            - rabbit
        environment:
            RABBIT_RESULTS_HOST: celery_results_postgres_db
            AIRFLOW_HOST: airflow_postgres_db
            RABBIT_MQ_HOST: rabbit
            C_FORCE_ROOT: 'true'
        command: >
            bash -c "/home/airflow/scripts/wait-for-it.sh -p 5432 -h airflow_postgres_db -- airflow initdb; tail -f /dev/null"
        volumes:
            - ./pkgs:/home/airflow/pkgs
            - ./plugins:/home/airflow/plugins
            - ./dags:/home/airflow/dags
            - ./.ssh:/home/airflow/.ssh:Z
            - ./scripts:/home/airflow/scripts
            - /var/run/docker.sock:/var/run/docker.sock
        networks:
          - app-tier

    airflow_scheduler:
        build:
            context: .
            dockerfile: Dockerfile
        depends_on:
            - celery_results_postgres_db
            - airflow_postgres_db
            - rabbit
            - airflow_init_db
        links:
            - celery_results_postgres_db
            - airflow_postgres_db
            - rabbit
        environment:
            RABBIT_RESULTS_HOST: celery_results_postgres_db
            AIRFLOW_HOST: airflow_postgres_db
            RABBIT_MQ_HOST: rabbit
            C_FORCE_ROOT: 'true'
        command: >
            bash -c "/home/airflow/scripts/wait-for-it.sh -p 5432 -h airflow_postgres_db -- sleep 120; airflow scheduler"
        volumes:
            - ./pkgs:/home/airflow/pkgs
            - ./plugins:/home/airflow/plugins
            - ./dags:/home/airflow/dags
            - ./.ssh:/home/airflow/.ssh:Z
            - ./scripts:/home/airflow/scripts
            - /var/run/docker.sock:/var/run/docker.sock
        networks:
          - app-tier

    airflow_webserver:
        build:
            context: .
            dockerfile: Dockerfile
        depends_on:
            - celery_results_postgres_db
            - airflow_postgres_db
            - rabbit
            - airflow_init_db
            - airflow_scheduler
        links:
            - celery_results_postgres_db
            - airflow_postgres_db
            - rabbit
        environment:
            RABBIT_RESULTS_HOST: celery_results_postgres_db
            AIRFLOW_HOST: airflow_postgres_db
            RABBIT_MQ_HOST: rabbit
            C_FORCE_ROOT: 'true'
        command: >
            bash -c "/home/airflow/scripts/wait-for-it.sh -p 5432 -h airflow_postgres_db -- sleep 120; airflow webserver"
        volumes:
            - ./pkgs:/home/airflow/pkgs
            - ./plugins:/home/airflow/plugins
            - ./dags:/home/airflow/dags
            - ./.ssh:/home/airflow/.ssh:Z
            - ./scripts:/home/airflow/scripts
            - /var/run/docker.sock:/var/run/docker.sock
        ports:
            - "8089:8080"
            - "5001:5000"
        networks:
          - app-tier

    airflow_worker:
        build:
            context: .
            dockerfile: Dockerfile
        depends_on:
            - celery_results_postgres_db
            - airflow_postgres_db
            - rabbit
            - airflow_init_db
            - airflow_scheduler
        links:
            - celery_results_postgres_db
            - airflow_postgres_db
            - rabbit
        environment:
            RABBIT_RESULTS_HOST: celery_results_postgres_db
            AIRFLOW_HOST: airflow_postgres_db
            RABBIT_MQ_HOST: rabbit
            C_FORCE_ROOT: 'true'
        command: >
            bash -c "/home/airflow/scripts/wait-for-it.sh -p 5432 -h airflow_postgres_db -- sleep 120; airflow worker"
        volumes:
            - ./pkgs:/home/airflow/pkgs
            - ./plugins:/home/airflow/plugins
            - ./dags:/home/airflow/dags
            - ./.ssh:/home/airflow/.ssh:Z
            - ./scripts:/home/airflow/scripts
            - /var/run/docker.sock:/var/run/docker.sock
        networks:
          - app-tier

networks:
  app-tier:
    driver: bridge


  # pyspark:
  #   image: jupyter/pyspark-notebook:latest
  #   container_name: pyspark_container
  #   ports:
  #     - "8888:8888"
  #   environment:
  #     - PYSPARK_DRIVER_PYTHON=jupyter
  #     - PYSPARK_DRIVER_PYTHON_OPTS=notebook
  #   volumes:
  #     - ./notebooks:/home/jovyan/work